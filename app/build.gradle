apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.ansgar.kotlinono"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

//**************************************//
// Jacoco
// Ref:
// - https://github.com/mgouline/android-samples/tree/master/jacoco
// - https://blog.gouline.net/code-coverage-on-android-with-jacoco-92ec90c9355e
// - http://vgaidarji.me/blog/2017/12/20/how-to-configure-jacoco-for-kotlin-and-java-project/
// - https://engineering.rallyhealth.com/android/code-coverage/testing/2018/06/04/android-code-coverage.html
//**************************************//
apply plugin: 'jacoco'

jacoco {
    reportsDir = file("$buildDir/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    // sources
    sourceDirectories = files("src/main/java")
    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/javac/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
//**************************************//
apply plugin: 'gnag'

gnag {
    failOnError false
    checkstyle {
        enabled false
    }
    pmd {
        enabled false
    }
    findbugs {
        enabled true
    }
    ktlint {
        enabled false
    }
    detekt {
        enabled false
    }
    androidLint {
        enabled false
    }
    github {
        repoName 'aiwen0918/KotlinOnO'
    }
}
//**************************************//
apply plugin: "findbugs"

task findbugs(type: FindBugs, dependsOn: "testDebugUnitTest") {
    group = 'verification'
    description = 'Find bugs mainly design flaws, bad practices, multithreaded correctness and code vulnerabilities.'
    ignoreFailures = true
    reportLevel = "low"
    effort = 'max'

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    source = fileTree(dir: "src/main/java")
    classes = fileTree(
            dir: "$buildDir/intermediates/javac/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug/com/"
    )
    classpath = files()
    excludeFilter = file("$rootDir/findbugs_exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/reports/findbugs.html"
    }
}